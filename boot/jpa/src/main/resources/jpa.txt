persistence framework
자바 어플리케이션에서 RDBMS 를 편하게 사용할 수 있는 프레임워크

SQL Mapping, ORM
SQL Mapping : 객체와 관계형 DB 를 개발자가 작성한 sql 로 매핑시켜주는 프레임워크
    ex) mybatis : 장점 - 사용이 쉽고 sql 변경 편리, 단점 - DBMS 종속적이며 sql 문을 작성해서 표현해야 함
ORM(Object Relational Mapping) : 객체와 RDBMS 의 데이터를 자동으로 매핑시켜주는 프레임워크
    ex) JPA : 장점 - 객체지향으로의 개발, 단점 - 복잡한 sql 구현이 어렵고 잘못 적용 시 성능저하

JPA(Java Persistence API)
: ORM 을 자바에서 구현하기 위한 표준 스펙으로 ORM 사용을 위한 인터페이스를 모아놓은 것.
  대표적인 구현제로 hibernate 가 있다.

영속성 컨텍스트 (persistence context)
: 엔티티를 영구 저장하는 환경 => 영속객체를 저장하는 곳
  엔티티 인스턴스와 해당 객체의 생명주기를 관리하는 곳
  캐시에 자료가 있는경우 캐시에 먼저 접근하고, 그렇지 않을 때 db와 연결을 시도한다.
  엔티티를 변경하는 경우 캐시 스냅샷에 저장을 하고, commit 시점에 db에 변경된 정보가 update 된다.
  clear 는 캐시를 비우는 행위이고, flush 는 쓰는 시점에 바로 db를 update 한다.

엔티티의 생명주기
비영속(new) : 엔티티 클래스의 인스턴스만 생성한 상태, 영속성 컨텍스트에 추가되지 않은 객체 상태
영속(managed/persistent) : 영속성 컨텍스트에 관리되는 상태
준영속(detached) : 영속성 컨텍스트에서 분리되는 상태, 더이상 관리되지 않는 상태로 다시 관리하기 위해서는 merge 사용
삭제(removed) : 영속성 컨텍스트에서 삭제한 상태

EntityManager : 영속성 컨텍스트에 접근하는 객체
저장 : em.persist(entity)
조회 : em.find(entity)
수정 : entity.setColumn(Entity.class,column 값)
삭제 : em.remove(obj)

객체와 테이블의 외래키 매핑
일대일 @OneToOne
일대다 @OneToMany : mappedBy 속성을 지정하여 객체와 연결
다대일 @ManyToOne : @JoinColumn 을 지정하여 연결
다대다 @ManyToMany => @ManyToOne , @OneToMany 로 분리해서 사용

FetchType.EAGER : 객체가 연결되어 있는 엔티티에서 모든 연관된 엔티티를 항상 join
FetchType.LAZY : 연관된 엔티티의 정보가 필요한 경우에만 해당 엔티티를 한번 더 select
